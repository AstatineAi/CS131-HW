/* Binary Searching Tree */
struct Node {
    int val;
    int size;
    (Node) -> void update;
    Node?[] children
}

int nodeSize(Node? pp) {
    if?(Node p = pp) {
        return p.size;
    }
    return 0;
}

void nodeUpdate(Node? this) {
    if?(Node p = this) {
        p.size = 1;
        p.size = p.size + nodeSize(p.children[0]);
        p.size = p.size + nodeSize(p.children[1]);
    }
    return;
}

struct Tree {
    Node? root;
    (Tree, int) -> void insert;
    (Tree, int) -> int rank;
    (Tree, int) -> int kth;
    (Tree, int) -> int pred;
    (Tree, int) -> int succ
}

Node createNode(int val) {
    var p = new Node {val = val; size = 1; children = new Node?[2]; update = nodeUpdate};
    return p;
}

void recInsert(Node p, int val) {
    if (val < p.val) {
        if?(Node l = p.children[0]) {
            recInsert(l, val);
        } else {
            p.children[0] = createNode(val);
        }
    } else {
        if?(Node r = p.children[1]) {
            recInsert(r, val);
        } else {
            p.children[1] = createNode(val);
        }
    }
    p.update(p);
    return;
}

/* Struct Tree Method */
void treeInsert(Tree this, int val) {
    if?(Node p = this.root) {
        recInsert(p, val);
    } else {
        this.root = createNode(val);
    }
    return;
}

int recRank(Node? pn, int val) {
    if?(Node p = pn) {
        if (val < p.val) {
            return recRank(p.children[0], val);
        } else if (val > p.val) {
            return 1 + nodeSize(p.children[0]) + recRank(p.children[1], val);
        } else {
            return nodeSize(p.children[0]) + 1;
        }
    }
    return 0;
}

/* Struct Tree Method */
int treeRank(Tree this, int val) {
    if?(Node p = this.root) {
        return recRank(p, val);
    }
    return -1;
}

int recKth(Node? pn, int k) {
    if?(Node p = pn) {
        if (k < nodeSize(p.children[0])) {
            return recKth(p.children[0], k);
        } else if (k == nodeSize(p.children[0])) {
            return p.val;
        } else {
            return recKth(p.children[1], k - nodeSize(p.children[0]) - 1);
        }
    }
    return 0;
}

/* Struct Tree Method */
int treeKth(Tree this, int k) {
    if?(Node p = this.root) {
        return recKth(p, k);
    }
    return -1;
}

int recPred(Node? pn, int val) {
    if?(Node p = pn) {
        if (val < p.val) {
            return recPred(p.children[0], val);
        } else if (val > p.val) {
            var r = recPred(p.children[1], val);
            if (r == -1) {
                return p.val;
            }
            return r;
        } else {
            if?(Node l = p.children[0]) {
                return recKth(l, nodeSize(l) - 1);
            }
            return -1;
        }
    }
    return -1;
}

/* Struct Tree Method */
int treePred(Tree this, int val) {
    if?(Node p = this.root) {
        return recPred(p, val);
    }
    return -1;
}

int recSucc(Node? pn, int val) {
    if?(Node p = pn) {
        if (val < p.val) {
            var l = recSucc(p.children[0], val);
            if (l == -1) {
                return p.val;
            }
            return l;
        } else if (val > p.val) {
            return recSucc(p.children[1], val);
        } else {
            if?(Node r = p.children[1]) {
                return recKth(r, 0);
            }
            return -1;
        }
    }
    return -1;
}

/* Struct Tree Method */
int treeSucc(Tree this, int val) {
    if?(Node p = this.root) {
        return recSucc(p, val);
    }
    return -1;
}

global t = new Tree {
    root = Node null;
    insert = treeInsert;
    rank = treeRank;
    kth = treeKth;
    pred = treePred;
    succ = treeSucc
};

global input = new int[][] {
    new int[] {1, 106465},
    new int[] {4, 1},
    new int[] {1, 317721},
    new int[] {1, 460929},
    new int[] {1, 644985},
    new int[] {3, 460929},
    new int[] {1, 84185},
    new int[] {1, 89851},
    new int[] {6, 81968},
    new int[] {1, 492737},
    new int[] {5, 493598}
};

int program(int argc, string[] argv) {
    for (var i = 0; i < 11; i = i + 1;) {
        if (input[i][0] == 1) {
            t.insert(t, input[i][1]);
        } else if (input[i][0] == 3) {
            print_int(t.rank(t, input[i][1]));
        } else if (input[i][0] == 4) {
            print_int(t.kth(t, input[i][1] - 1));
        } else if (input[i][0] == 5) {
            print_int(t.pred(t, input[i][1]));
        } else if (input[i][0] == 6) {
            print_int(t.succ(t, input[i][1]));
        }
    }
    return 0;
}

